generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Note: Case-insensitive uniqueness handled via migration
  emailVerified DateTime?
  image         String?
  password      String?
  isGuest       Boolean   @default(false)
  guestExpiresAt DateTime?
  accounts      Account[]
  plans         Plan[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id                       String                    @id @default(cuid())
  courseCode               String
  catalogNumber            String
  title                    String
  description              String?
  units                    Float
  prerequisites            String?
  corequisites             String?
  antirequisites           String?
  originalSubstitutions    CourseSubstitution[]      @relation("OriginalCourse")
  substituteSubstitutions  CourseSubstitution[]      @relation("SubstituteCourse")
  degreeRequirementCourses DegreeRequirementCourse[]
  planCourses              PlanCourse[]
  listCourses              RequirementListCourse[]

  @@unique([courseCode, catalogNumber])
}

model Faculty {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  programs    Program[]
}

model Program {
  id          String   @id @default(cuid())
  name        String
  description String?
  facultyId   String
  degrees     Degree[]
  faculty     Faculty  @relation(fields: [facultyId], references: [id])

  @@unique([name, facultyId])
}

model Degree {
  id              String                 @id @default(cuid())
  name            String
  description     String?
  programId       String
  program         Program                @relation(fields: [programId], references: [id])
  requirementSets DegreeRequirementSet[]
  planDegrees     PlanDegree[]

  @@unique([name, programId])
}

model DegreeRequirementSet {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  degreeId            String
  academicCalendarYear String?
  requirements        DegreeRequirement[]
  degree              Degree              @relation(fields: [degreeId], references: [id])

  @@unique([name, degreeId])
}

model DegreeRequirement {
  id                    String                    @id @default(cuid())
  name                  String
  description           String?
  requirementSetId      String
  type                  String
  unitsRequired         Float?
  coursesRequired       Int?
  levelRestriction      String?
  courseCodeRestriction String?
  concentrationType     String?
  maxSubjects           Int?
  minCoursesPerSubject  Int?
  minSubjects           Int?
  // Enhanced fields for additional requirement types
  minGradeRequired      Int?                      // For minimum grade requirements (e.g., 60%)
  minAverage            Float?                    // For minimum average requirements (e.g., 75%)
  maxFailures           Int?                      // For maximum failure limits
  failureRestriction    String?                   // Subject restriction for failure limits (e.g., "CHEM")
  maxUnits              Float?                    // For maximum unit limits
  requireConcurrent     String?                   // For concurrent enrollment requirements
  customLogicType       String?                   // For complex custom logic
  customLogicParams     String?                   // JSON string with parameters for custom logic
  substitutions         CourseSubstitution[]
  requirementSet        DegreeRequirementSet      @relation(fields: [requirementSetId], references: [id])
  courses               DegreeRequirementCourse[]
  planRequirements      PlanRequirement[]
  lists                 RequirementList[]
}

model DegreeRequirementCourse {
  id            String            @id @default(cuid())
  requirementId String
  courseId      String
  isRequired    Boolean           @default(true)
  course        Course            @relation(fields: [courseId], references: [id])
  requirement   DegreeRequirement @relation(fields: [requirementId], references: [id])

  @@unique([requirementId, courseId])
}

model Plan {
  id                   String       @id @default(cuid())
  name                 String
  userId               String
  created              DateTime     @default(now())
  updated              DateTime     @updatedAt
  academicCalendarYear String?
  coopSequence         String?      @default("NO_COOP")
  customTerms          String[]     @default([])
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses              PlanCourse[]
  degrees              PlanDegree[]
  
  @@unique([name, userId])
}

model PlanCourse {
  id        String  @id @default(cuid())
  planId    String
  courseId  String
  term      String?
  status    String
  grade     String?
  numericGrade Float?  // Store numeric grade for average calculations
  termIndex Int?
  course    Course  @relation(fields: [courseId], references: [id])
  plan      Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, courseId])
}

model PlanDegree {
  id           String            @id @default(cuid())
  planId       String
  degreeId     String
  type         String
  degree       Degree            @relation(fields: [degreeId], references: [id])
  plan         Plan              @relation(fields: [planId], references: [id], onDelete: Cascade)
  requirements PlanRequirement[]

  @@unique([planId, degreeId, type])
}

model RequirementList {
  id            String                  @id @default(cuid())
  name          String
  description   String?
  requirementId String
  requirement   DegreeRequirement       @relation(fields: [requirementId], references: [id])
  courses       RequirementListCourse[]
}

model RequirementListCourse {
  id       String          @id @default(cuid())
  listId   String
  courseId String
  course   Course          @relation(fields: [courseId], references: [id])
  list     RequirementList @relation(fields: [listId], references: [id])

  @@unique([listId, courseId])
}

model CourseSubstitution {
  id                  String            @id @default(cuid())
  originalCourseId    String
  substituteCourseId  String
  requirementId       String
  planTypeRestriction String?
  originalCourse      Course            @relation("OriginalCourse", fields: [originalCourseId], references: [id])
  requirement         DegreeRequirement @relation(fields: [requirementId], references: [id])
  substituteCourse    Course            @relation("SubstituteCourse", fields: [substituteCourseId], references: [id])

  @@unique([originalCourseId, substituteCourseId, requirementId])
}

model PlanRequirement {
  id            String            @id @default(cuid())
  planDegreeId  String
  requirementId String
  status        String
  progress      Float?
  planDegree    PlanDegree        @relation(fields: [planDegreeId], references: [id], onDelete: Cascade)
  requirement   DegreeRequirement @relation(fields: [requirementId], references: [id])

  @@unique([planDegreeId, requirementId])
}
